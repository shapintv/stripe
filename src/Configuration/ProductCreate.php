<?php

declare(strict_types=1);

/*
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file for details.
 */

namespace Shapin\Stripe\Configuration;

use Shapin\Stripe\Model\Product\Product;
use Symfony\Component\Config\Definition\Builder\TreeBuilder;
use Symfony\Component\Config\Definition\ConfigurationInterface;

class ProductCreate implements ConfigurationInterface
{
    public function getConfigTreeBuilder()
    {
        $treeBuilder = new TreeBuilder('shapin_stripe');
        $rootNode = $treeBuilder->getRootNode();

        $rootNode
            ->children()
                ->scalarNode('id')
                    ->info('An identifier will be randomly generated by Stripe. You can optionally override this ID, but the ID must be unique across all products in your Stripe account. Applicable to both service and good types.')
                ->end()
                ->scalarNode('name')
                    ->isRequired()
                    ->info('The product’s name, meant to be displayable to the customer. Applicable to both service and good types.')
                ->end()
                ->enumNode('type')
                    ->isRequired()
                    ->info('The type of the product. The product is either of type service, which is eligible for use with Subscriptions and Plans or good, which is eligible for use with Orders and SKUs.')
                    ->values(['service', 'good'])
                ->end()
                ->booleanNode('active')
                    ->info('Whether the product is currently available for purchase. Defaults to true.')
                ->end()
                ->arrayNode('attributes')
                    ->scalarPrototype()->end()
                    ->info('A list of up to 5 alphanumeric attributes. Applicable to both service and good types.')
                    ->validate()
                        ->ifTrue(function($c) {
                            return 5 < count($c);
                        })
                        ->thenInvalid('You can have up to 5 attributes.')
                    ->end()
                ->end()
                ->scalarNode('caption')
                    ->info('A short one-line description of the product, meant to be displayable to the customer. May only be set if type=good.')
                ->end()
                ->arrayNode('deactivate_on')
                    ->prototype('scalar')->end()
                    ->info('An array of Connect application names or identifiers that should not be able to order the SKUs for this product. May only be set if type=good.')
                ->end()
                ->scalarNode('description')
                    ->info('The product’s description, meant to be displayable to the customer. May only be set if type=good.')
                ->end()
                ->arrayNode('images')
                    ->scalarPrototype()->end()
                    ->info('A list of up to 8 URLs of images for this product, meant to be displayable to the customer. May only be set if type=good.')
                    ->validate()
                        ->ifTrue(function($c) {
                            return 8 < count($c);
                        })
                        ->thenInvalid('You can have up to 8 images.')
                    ->end()
                ->end()
                ->arrayNode('metadata')
                    ->scalarPrototype()->end()
                    ->info('Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to metadata.')
                ->end()
                ->arrayNode('package_dimensions')
                    ->children()
                        ->floatNode('height')
                            ->isRequired()
                            ->info('Height, in inches. Maximum precision is 2 decimal places.')
                        ->end()
                        ->floatNode('length')
                            ->isRequired()
                            ->info('Length, in inches. Maximum precision is 2 decimal places.')
                        ->end()
                        ->floatNode('weight')
                            ->isRequired()
                            ->info('Weight, in ounces. Maximum precision is 2 decimal places.')
                        ->end()
                        ->floatNode('width')
                            ->isRequired()
                            ->info('Width, in inches. Maximum precision is 2 decimal places.')
                        ->end()
                    ->end()
                    ->info('The dimensions of this product for shipping purposes. A SKU associated with this product can override this value by having its own package_dimensions. May only be set if type=good.')
                ->end()
                ->booleanNode('shippable')
                    ->info('Whether this product is shipped (i.e., physical goods). Defaults to true. May only be set if type=good.')
                ->end()
                ->scalarNode('url')
                    ->info('A URL of a publicly-accessible webpage for this product. May only be set if type=good.')
                ->end()
            ->end()
        ;

        $rootNode
            ->validate()
                ->always(function($c) {
                    if (empty($c['deactivate_on'])) {
                        unset($c['deactivate_on']);
                    }

                    return $c;
                })
            ->end()
        ;

        $goodOnlyFields = ['caption', 'deactivate_on', 'description', 'package_dimensions', 'shippable', 'url'];
        foreach ($goodOnlyFields as $field) {
            $rootNode->validate()
                ->ifTrue(function ($v) use ($field) {
                    return isset($v['type']) && Product::TYPE_GOOD !== $v['type'] && isset($v[$field]);
                })
                ->thenInvalid("You can only set \"$field\" for \"good\" products.")
            ->end();
        }

        return $treeBuilder;
    }
}
